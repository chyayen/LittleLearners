@model ELearning.Models.RegisterViewModel
@{
    Layout = null;
    ViewBag.Title = "Register";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <title>Register - LittleLearners</title>
    <meta content="" name="description">
    <meta content="" name="keywords">

    <!-- Google Fonts -->
    <link href="https://fonts.gstatic.com" rel="preconnect">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">

    <!-- Vendor CSS Files -->
    <link href="~/Content/bootstrap.min.css" rel="stylesheet">
    <link href="~/Content/admin_template/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="~/Content/admin_template/vendor/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="~/Content/admin_template/vendor/quill/quill.snow.css" rel="stylesheet">
    <link href="~/Content/admin_template/vendor/quill/quill.bubble.css" rel="stylesheet">
    <link href="~/Content/admin_template/vendor/remixicon/remixicon.css" rel="stylesheet">
    <link href="~/Content/admin_template/vendor/simple-datatables/style.css" rel="stylesheet">

    <!-- Template Main CSS File -->
    <link href="~/Content/admin_template/css/style.css" rel="stylesheet">
    <link href="~/Content/Site.css" rel="stylesheet">
</head>

<body>

    <main>
        <div class="container">

            <section class="section register min-vh-100 d-flex flex-column align-items-center justify-content-center py-4">
                <div class="container">
                    <div class="row justify-content-center">
                        <div class="col-lg-4 col-md-6 d-flex flex-column align-items-center justify-content-center">

                            <div class="d-flex justify-content-center py-4">
                                <a href="@Url.Action("Index", "Home")" class="logo d-flex align-items-center w-auto">
                                    <span class="d-none d-lg-block text-uppercase">LitteLearners</span>
                                </a>
                            </div><!-- End Logo -->

                            <div class="card mb-3">

                                <div class="card-body">

                                    <div class="pt-4 pb-2">
                                        <h5 class="card-title text-center pb-0 fs-4">Create an Account</h5>
                                        <p class="text-center small">Enter your personal details to create account</p>
                                    </div>

                                    @Html.Raw(TempData["AlertMessage"])

                                    @using (Html.BeginForm("Register", "Admin", FormMethod.Post, new { @class = "row g-3", novalidate = "novalidate", onsubmit = "return validatePassword()" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <div class="col-12">
                                            <label for="yourName" class="form-label">Name</label>
                                            @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", required = "" })
                                            @Html.ValidationMessageFor(m => m.FullName, "", new { @class = "custom-invalid-feedback text-danger" })
                                        </div>

                                        <div class="col-12">
                                            <label for="yourEmail" class="form-label">Email</label>
                                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", required = "", type = "email" })
                                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "custom-invalid-feedback text-danger" })
                                        </div>

                                        <div class="col-12">
                                            <label for="yourUsername" class="form-label">Username</label>
                                            <div class="input-group has-validation">
                                                <span class="input-group-text" id="inputGroupPrepend"><i class="bi bi-person"></i></span>
                                                @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", required = "" })
                                                @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "custom-invalid-feedback text-danger" })
                                            </div>
                                        </div>

                                        @*<div class="col-12">
                                                <label for="yourPassword" class="form-label">Password</label>
                                                @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "" })
                                                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "custom-invalid-feedback field-validation-valid text-danger", id = "passwordError" })
                                            </div>*@

                                        <div class="col-12">
                                            <label for="Password" class="form-label">Password</label>
                                            <div class="input-group">
                                                @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "" })
                                                <button type="button" class="btn btn-outline-secondary" id="togglePassword">
                                                    <i class="bi bi-eye" id="passwordIcon"></i>
                                                </button>
                                            </div>
                                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "custom-invalid-feedback field-validation-valid", id = "passwordError" })
                                        </div>

                                        <div class="col-12">
                                            <label for="ConfirmPassword" class="form-label">Confirm Password</label>
                                            <div class="input-group">
                                                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", required = "" })
                                                <button type="button" class="btn btn-outline-secondary" id="toggleConfirmPassword">
                                                    <i class="bi bi-eye" id="confirmPasswordIcon"></i>
                                                </button>
                                            </div>
                                            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "custom-invalid-feedback field-validation-valid", id = "confirmPasswordError" })
                                        </div>

                                        <div class="col-12">
                                            <button class="btn btn-success w-100" type="submit">Create Account</button>
                                        </div>
                                        <div class="col-12">
                                            <p class="small mb-0">Already have an account? <a href="@Url.Action("Login")">Log in</a></p>
                                        </div>
                                    }

                                </div>
                            </div>

                        </div>
                    </div>
                </div>

            </section>

        </div>
    </main><!-- End #main -->

    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>

    <!-- Vendor JS Files -->
    <script src="~/Scripts/jquery-3.7.1.min.js"></script>
    @*<script src="~/Scripts/jquery.validate.min.js"></script>*@
    @Scripts.Render("~/bundles/jqueryval")
    <!-- Template Main JS File -->

    <script>
        //function validatePassword() {
        //    const password = document.getElementById("Password").value;
        //    const errorMessage = document.getElementById("passwordError");

        //    // Regular expression to match the password requirements
        //    const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$!%*?&])[A-Za-z\d$!%*?&]{8,}$/;
        //    const isValid = regex.test(password);

        //    if (!isValid) {
        //        errorMessage.innerHTML = "Password must contain at least 8 characters, including uppercase, lowercase, number, and special character.";
        //        //errorMessage.classList.add("text-danger"); // Optional: Apply a red color to the error message.
        //        console.log(errorMessage.innerHTML);
        //        return false; // Prevent form submission
        //    }

        //    // Clear the error message if validation passes
        //    errorMessage.innerHTML = "";
        //    return true;
        //}

        function validatePassword() {
            const password = document.getElementById("Password").value;
            const confirmPassword = document.getElementById("ConfirmPassword").value;
            const passwordError = document.getElementById("passwordError");
            const confirmPasswordError = document.getElementById("confirmPasswordError");

            // Regular expression to match the password requirements
            const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$!%*?&])[A-Za-z\d$!%*?&]{8,}$/;
            const isValid = regex.test(password);

            let isValidForm = true;

            // Check for password strength
            if (!isValid) {
                passwordError.innerHTML = "Password must contain at least 8 characters, including uppercase, lowercase, number, and special character.";
                passwordError.style.display = "block";
                isValidForm = false;
            } else {
                passwordError.innerHTML = "";
                passwordError.style.display = "none";
            }

            // Check if passwords match
            if (password !== confirmPassword) {
                confirmPasswordError.innerHTML = "Passwords do not match.";
                confirmPasswordError.style.display = "block";
                isValidForm = false;
            } else {
                confirmPasswordError.innerHTML = "";
                confirmPasswordError.style.display = "none";
            }

            return isValidForm;
        }

        document.getElementById("togglePassword").addEventListener("click", function () {
            const passwordField = document.getElementById("Password");
            const passwordIcon = document.getElementById("passwordIcon");
            const isPasswordVisible = passwordField.type === "password";

            passwordField.type = isPasswordVisible ? "text" : "password";
            passwordIcon.classList.toggle("bi-eye", !isPasswordVisible);
            passwordIcon.classList.toggle("bi-eye-slash", isPasswordVisible);
        });

        document.getElementById("toggleConfirmPassword").addEventListener("click", function () {
            const confirmPasswordField = document.getElementById("ConfirmPassword");
            const confirmPasswordIcon = document.getElementById("confirmPasswordIcon");
            const isConfirmPasswordVisible = confirmPasswordField.type === "password";

            confirmPasswordField.type = isConfirmPasswordVisible ? "text" : "password";
            confirmPasswordIcon.classList.toggle("bi-eye", !isConfirmPasswordVisible);
            confirmPasswordIcon.classList.toggle("bi-eye-slash", isConfirmPasswordVisible);
        });
    </script>

</body>

</html>



