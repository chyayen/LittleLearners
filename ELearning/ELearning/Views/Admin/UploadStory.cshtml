@model ELearning.Models.StoryFileUploadViewModel

@{ ViewBag.Title = "Upload Stories"; }

<div class="pagetitle">
    <h1>@ViewBag.Title</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index")">Home</a></li>
            <li class="breadcrumb-item">Stories</li>
            <li class="breadcrumb-item active">@ViewBag.Title</li>
        </ol>
    </nav>
</div><!-- End Page Title -->

<section class="section"> 
    <div class="card">
        <div class="card-body pt-3">
            <div class="mb-3 d-none"> 
                <a href="@Url.Action("DownloadStoryFormat", "Admin")" class="btn btn-sm btn-success">Export Format</a>
            </div>

            @using (Html.BeginForm("UploadStory", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                </div>

                @Html.AntiForgeryToken() 
                @Html.HiddenFor(m => m.SelectedSectionIds)
                @Html.HiddenFor(m => m.SelectedStudentIds)
                <div class="row mb-3"> 
                    <label class="col-sm-2 col-form-label">Story</label>
                    <div class="col-sm-10"> 
                        @Html.TextBoxFor(m => m.File, new { @class = "form-control", type = "file", required = "", accept = ".docx,.doc" })
                        @Html.ValidationMessageFor(m => m.File, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="inputText" class="col-sm-2 col-form-label">Subtitle</label>
                    <div class="col-sm-10">
                        @Html.TextBoxFor(m => m.Subtitle, new { @class = "form-control", rows = "4" })
                    </div>
                </div>
                <div class="row mb-3"> 
                    <label class="col-sm-2 col-form-label">Cover Page</label>
                    <div class="col-sm-10"> 
                        @Html.TextBoxFor(m => m.CoverPage, new { @class = "form-control", type = "file", accept = ".png,.jpg,.jpeg" })
                        @Html.ValidationMessageFor(m => m.CoverPage, "", new { @class = "text-danger" })
                    </div>
                </div> 
                <div class="row mb-3">
                    <label for="inputText" class="col-sm-2 col-form-label">Class</label>
                    <div class="col-sm-10">
                        @Html.DropDownListFor(m => m.ClassID, new SelectList(Model.ClassList, "Value", "Text"), "-- Select --", new { @class = "form-select", required = "" })
                    </div>
                </div>

                <!-- Section Dropdown -->
                <div class="row mb-3" id="sectionContainer" style="display:none;">
                    <label class="col-sm-2 col-form-label">Sections</label>
                    <div class="col-sm-10">
                        <select class="form-select" id="SectionIDs" name="SectionIDs" multiple>
                            <!-- Options will be dynamically loaded here -->
                        </select>
                    </div>
                </div>

                <!-- Student Multi-Select -->
                <div class="row mb-3" id="studentContainer" style="display:none;">
                    <label class="col-sm-2 col-form-label">Students</label>
                    <div class="col-sm-10">
                        <select class="form-select" id="StudentIDs" name="StudentIDs" multiple>
                            <!-- Students will be dynamically populated here -->
                        </select>
                    </div>
                </div>

                @Html.Hidden("Incomplete", Model.Incomplete ? "true" : "false")
                <div class="row mb-2">
                    <label class="col-sm-2 col-form-label">Incomplete</label>
                    <div class="col-sm-10">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="flexSwitchCheckIncomplete">
                            <label class="form-check-label" for="flexSwitchCheckIncomplete">&nbsp;</label>
                        </div>
                    </div>
                </div>

                <div class="row mt-5">
                    <label for="inputText" class="col-sm-2 col-form-label">&nbsp;</label>
                    <div class="col-sm-10">
                        <button type="submit" class="btn btn-sm btn-primary" id="btnAddStory">Add</button>
                    </div>
                </div>
            }
        </div>
    </div>
</section>
        
@section Scripts { 
    <script>
        $(document).ready(function () { 
            // Initialize Select2 for dynamic field
            $('#SectionIDs').select2({
                theme: "bootstrap-5",
                width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
                placeholder: "-- All --"
            });
            $('#StudentIDs').select2({
                theme: "bootstrap-5",
                width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
                placeholder: "-- All --"
            });


            // Populate Sections based on selected Class
            function fetchSectionsByClass(classId) {
                $.ajax({
                    url: `/Admin/GetClassSectionsByClassID?classId=${classId}`,
                    type: 'GET',
                    success: function (sections) {
                        $('#SectionIDs').empty();
                        sections.forEach(section => {
                            $('#SectionIDs').append(new Option(section.Name, section.ID));
                        });
                        $('#SectionIDs').find('option').prop('selected', true); // Select all students by default
                        $('#sectionContainer').show(); // Show the section container

                        const selectedSections = $('#SectionIDs').val();
                        fetchStudentsBySection(classId, selectedSections);
                        updateSelectedSectionIDs(); //for changes in the SectionIDs dropdown 
                    },
                    error: function () {
                        alert('Error loading sections');
                    }
                });
            }

            // Populate Students based on selected Sections
            function fetchStudentsBySection(classId, sectionIds) {
                $.ajax({
                    url: '/Admin/GetClassStudentsBySectionID',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ classid: classId, sectionIds: sectionIds }),
                    success: function (students) {
                        $('#StudentIDs').empty();
                        students.forEach(student => {
                            $('#StudentIDs').append(new Option(student.Name, student.ID));
                        });
                        $('#StudentIDs').find('option').prop('selected', true); // Select all students by default
                        $('#studentContainer').show(); // Show the student container
                        updateSelectedStudentIDs(); //for changes in the StudentIDs dropdown
                    },
                    error: function () {
                        alert('Error loading students');
                    }
                });
            }

            // Function to update the hidden field with selected section IDs
            function updateSelectedSectionIDs() {
                // Get the selected section IDs, map them to numbers, or set an empty array if none
                const selectedSectionIds = $("#SectionIDs").val() ? $("#SectionIDs").val().map(Number) : [];

                // Update the hidden field with the selected section IDs as a comma-separated string
                $("#SelectedSectionIds").val(selectedSectionIds.join(','));
            }

            // Function to update the hidden field with selected section IDs
            function updateSelectedStudentIDs() {
                // Get the selected section IDs, map them to numbers, or set an empty array if none
                const selectedStudentIds = $("#StudentIDs").val() ? $("#StudentIDs").val().map(Number) : [];

                // Update the hidden field with the selected section IDs as a comma-separated string
                $("#SelectedStudentIds").val(selectedStudentIds.join(','));
            }

            // Trigger fetch on Class selection
            $('#ClassID').change(function () {
                const classId = $(this).val();
                if (classId) {
                    fetchSectionsByClass(classId); 
                }
            });

            // Trigger fetch on Section selection
            $('#SectionIDs').change(function () {
                const selectedSections = $(this).val();
                const classId = $('#ClassID').val();
                fetchStudentsBySection(classId, selectedSections);  
                $('#StudentIDs').empty(); // Clear students if no sections are selected
                updateSelectedSectionIDs(); //for changes in the SectionIDs dropdown 
            });

            // Trigger fetch on Section selection
            $('#StudentIDs').change(function () {
                updateSelectedStudentIDs(); //for changes in the StudentIDs dropdown
            });

            $("#flexSwitchCheckIncomplete").change(function () {
                if ($(this).is(':checked')) {
                    $("#Incomplete").val("true");
                } else {
                    $("#Incomplete").val("false");
                }
            });


        }); 
    </script>

}
