@model ELearning.Models.StoryModel
@{
    Layout = "~/Views/Shared/_LayoutMain.cshtml";
    ViewBag.Title = "Stories";
}

@section Styles {
    <style>
        /* Optional: Add styles to make the words clickable */
        .clickable-word {
            cursor: pointer;
            color: black;
        }

            .clickable-word:hover {
                text-decoration: underline;
            }

        .flipbook {
            width: 75%;
            height: 30rem;
            position: relative;
            margin: 20px auto;
            perspective: 1000px;
        }

        /* Title Page (Cover) */
        .fb-cover {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            background: #eee;
            z-index: 5;
            box-shadow: 10px 10px 10px 10px rgba(0, 0, 0, 0.2);
            border: 1px solid #ddd;
            transition: opacity 0.6s ease;
        }

        .fb2 {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
        }

        .gif-bottom {
            position: absolute;
            bottom: 10px;
            right: 10px;
        }

            .fb-cover.hidden {
                opacity: 0;
                z-index: -1;
            }

        .fb-title-content {
            color: white;
            font-size: 32px;
            text-transform: uppercase;
        }

        .fb-page {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            background: white;
            border: 1px solid #ddd;
            backface-visibility: hidden;
            transform-origin: left;
            transition: transform 0.6s ease;
            z-index: 1;
            text-align: justify;
        }

            .fb-page.flipped {
                transform: rotateY(-180deg);
                z-index: 0;
            }

        .fb-content {
            padding: 20px; /* Adjust padding if needed */
            height: 100%;
            position: relative;
            font-size: 21px;
            box-shadow: 5px 5px 5px 5px rgba(0, 0, 0, 0.2);
        }

        .fb-page-content > img {
            height: 250px !important;
        }

        .fb-page-title {
            position: absolute; /* Position the small element absolutely within the page */
            bottom: 10px; /* Distance from the bottom */
            right: 10px; /* Distance from the right */
            font-size: 18px; /* Adjust the font size */
            color: #666; /* Adjust the color as per your theme */
            font-style: italic; /* Optional styling */
        }

        .fb-readable-word {
            cursor: pointer; /* Makes the word look clickable */
            color: blue; /* Optional styling to differentiate clickable words */
            text-decoration: underline;
        }

            .fb-readable-word:hover {
                color: darkblue; /* Change color on hover */
            }
    </style>

}

<!-- Page Title -->
<div class="page-title" data-aos="fade">
    <div class="heading">
        <div class="container">
            <div class="row d-flex justify-content-center text-center">
                <div class="col-lg-8">
                    <h1>@ViewBag.Title</h1>
                </div>
            </div>
        </div>
    </div>
</div><!-- End Page Title -->
<!-- Stories Story Details Section -->
<section id="stories-story-details" class="stories-story-details section">
    <div class="flipbook">
        <!-- Title Page (Cover) -->
        <div class="fb-cover">
            <div class="fb2 fb-title-content">
                <h1>@Model.Title</h1>
                <h5 class="mt-5">@Model.Subtitle</h5>
            </div>
            <div class="gif-bottom">
                <img src="~/Content/web_template/img/kids-books.png" alt="Details Animation" width="20%" />
            </div>
        </div>

        <!-- Dynamic Flipbook Pages -->
        @foreach (var page in Model.PageContents)
        {
            <div class="fb-page">
                <div class="fb-content">
                    @*<p class="fb-page-content">@Html.Raw(page.Content)</p>*@
                    @Html.Raw(page.Content)

                    <small class="fb-page-title">@page.Title</small>
                </div>
            </div>
        }
    </div>
     


    @*<div class="text-center">
        <button type="button" id="playPauseBtn" class="btn btn-success me-3"><i class="bi-volume-up"></i></button>
        <button type="button" id="prevBtn" class="btn btn-secondary">Previous</button>
        <button type="button" id="nextBtn" class="btn btn-secondary">Next</button>

        @if (Model.QuizAttempt == 0 || Model.AllowToRetake)
        {
            <a href="@Url.Action("Question", "Story", new { id = Model.ID })" class="btn btn-warning ms-3 @Html.Raw(Model.Progress.LastPageRead == Model.PageContents.Count ? "" : "d-none")" id="btnTakeQuiz">
                @Html.Raw(Model.Incomplete ? "Complete the Story" : "Take a Quiz")
            </a>
        }
        else
        {
            <a href="@Url.Action("QuizHistoryAttemptDetail", "Story", new { id = Model.ID, attempt = Model.QuizAttempt })" class="btn btn-warning ms-3" id="btnQuizResult">View Quiz Result</a>
        }
    </div>*@

<div class="row">
    <div class="col-4 text-end">
       
    </div>
    <div class="col-4 text-center">
        <!-- Search and Navigation Controls -->
        <div class="text-center mb-3">
            <input type="number" id="pageInput" placeholder="Enter page number" min="1" max="5" class="form-control" style="width: 200px; display: inline-block;">
            <button type="button" id="goToPageBtn" class="btn btn-success btn-lg">Go</button>
        </div>

        <button type="button" id="playPauseBtn" class="btn btn-success me-3 btn-lg"><i class="bi-volume-up"></i></button>
        <button type="button" id="prevBtn" class="btn btn-secondary btn-lg">Previous</button>
        <button type="button" id="nextBtn" class="btn btn-secondary btn-lg">Next</button>

        @if (Model.QuizAttempt == 0 || Model.AllowToRetake)
        {
            <a href="@Url.Action("Question", "Story", new { id = Model.ID })" class="btn btn-warning ms-3 btn-lg @Html.Raw(Model.Progress.LastPageRead == Model.PageContents.Count ? "" : "d-none")" id="btnTakeQuiz">
                @Html.Raw(Model.Incomplete ? "Complete the Story" : "Take a Quiz")
            </a>
        }
        else
        {
            <a href="@Url.Action("QuizHistoryAttemptDetail", "Story", new { id = Model.ID, attempt = Model.QuizAttempt })" class="btn btn-warning ms-3 btn-lg" id="btnQuizResult">View Quiz Result</a>
        }
    </div>

</div>

    <!-- Random Question Modal -->
    <div class="modal fade" id="randomQuestionModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="randomQuestionModalLabel">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="randomQuestionModalLabel">&nbsp;</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="randomQuestion">Loading question...</p>  

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@Model.RandomAnswerOption1" name="answers[]" id="RandomAnswerOption1" />
                                <label class="form-check-label" for="RandomAnswerOption1">
                                    @Model.RandomAnswerOption1
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@Model.RandomAnswerOption2" name="answers[]" id="RandomAnswerOption2" />
                                <label class="form-check-label" for="RandomAnswerOption2">
                                    @Model.RandomAnswerOption2
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@Model.RandomAnswerOption3" name="answers[]" id="RandomAnswerOption3" />
                                <label class="form-check-label" for="RandomAnswerOption3">
                                    @Model.RandomAnswerOption3
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@Model.RandomAnswerOption4" name="answers[]" id="RandomAnswerOption4" />
                                <label class="form-check-label" for="RandomAnswerOption4">
                                    @Model.RandomAnswerOption4
                                </label>
                            </div>
                        </div>
                    </div>

                    <p class="fst-italic">Hint: @Model.RandomQuestionHint</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary d-none" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="submitRandomQuestionModal">Submit</button>
                </div>
            </div>
        </div>
    </div>

</section><!-- /Stories Story Details Section -->


@section Scripts { 
    <script>
        let speechSynthesisInstance;
        let currentPageIndex = @Html.Raw(Model.Progress.LastPageRead > 0 ? Model.Progress.LastPageRead : 0);
        const totalPages = @Model.PageContents.Count; // Number of pages
        let isReading = false; // State to track if reading is active

        const pages = document.querySelectorAll('.fb-page');
        const cover = document.querySelector('.fb-cover'); // Select the cover page

        const questions = [
            { question: "@Model.RandomQuestion" }
        ];
        const randomQuestionText = document.getElementById('randomQuestion');
        const submitRandomQuestionModal = document.getElementById('submitRandomQuestionModal');
        let randomQuestionPage = Math.floor(totalPages / 2);// Random page (exclude cover, first and last page)
        let questionShown = false; // Flag to track if the question has been shown


        // Track whether random question modal has been shown or not
        let randomQuestionShown = false;

        // Function to start reading the entire flipbook
        function startReading() {
            currentPageIndex = 0; // Reset to first page
            readPage(currentPageIndex); // Start reading from the first page
        }

        // Function to pause the reading
        function pauseReading() {
            if (speechSynthesis.speaking) {
                speechSynthesis.cancel();
            }
            isReading = false; // Update reading state
            document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-volume-up\"></i>"; // Change button text
            $('#playPauseBtn').removeClass("btn-danger");
            $('#playPauseBtn').addClass("btn-success");
        }

        // Function to start or pause reading based on the state
        function togglePlayPause() {
            if (isReading) {
                pauseReading();
            } else {
                isReading = true;
                document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-stop-fill\"></i>"; // Change button text
                $('#playPauseBtn').removeClass("btn-success");
                $('#playPauseBtn').addClass("btn-danger");
                //startReading(); // Start reading
                readPage(currentPageIndex);
            }
        }

        // Function to read the content of a given page or from a specific word
        function readPage(pageIndex, startFromWordIndex = 0) {
            // Check if we have reached the end of the pages
            if (pageIndex >= totalPages) {
                console.log('Finished reading all pages.');
                return;
            }

            const page = pages[pageIndex];
            const contentParagraphs = page.querySelectorAll('.fb-page-content');

            // Concatenate all the text from the content paragraphs into an array of words, skipping empty or non-text content
            let wordsToRead = [];
            contentParagraphs.forEach(paragraph => {
                const paragraphText = paragraph.innerText.trim(); // Get text content and trim it

                // Only consider paragraphs with actual text content (non-empty, no HTML-only content)
                if (paragraphText.length > 0) {
                    wordsToRead.push(...paragraphText.split(/\s+/)); // Split text into individual words
                }
            });

            if (wordsToRead.length === 0) {
                console.log('No valid content to read on this page.');
                return; // Skip reading if there's no valid content
            }

            // Only read from the specified word index
            let textToRead = wordsToRead.slice(startFromWordIndex).join(' ');

            // Create a new SpeechSynthesisUtterance for the text
            speechSynthesisInstance = new SpeechSynthesisUtterance(textToRead);
            speechSynthesisInstance.lang = 'en-US';
            speechSynthesisInstance.pitch = 5;
            speechSynthesisInstance.rate = 1;
            speechSynthesisInstance.volume = 1;

            // Add event listeners to handle when speech ends
            speechSynthesisInstance.onend = function () {
                //if (currentPageIndex < totalPages - 1) { // Only flip if not the last page
                //    currentPageIndex++; // Move to the next page
                //    flipPage(); // Flip to the next page
                //    readPage(currentPageIndex);  // Read the next page
                //} else {
                //    isReading = false; // Finished reading all pages
                //    document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-volume-up\"></i>"; // Reset button text
                //    $('#playPauseBtn').removeClass("btn-danger");
                //    $('#playPauseBtn').addClass("btn-success");
                //}
                //console.log(currentPageIndex);

                isReading = false; // Finished reading all pages
                document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-volume-up\"></i>"; // Reset button text
                $('#playPauseBtn').removeClass("btn-danger");
                $('#playPauseBtn').addClass("btn-success");
            };

            // Start speaking
            speechSynthesis.speak(speechSynthesisInstance);
        }

        //// Function to handle word click and start reading from the clicked word
        //function handleWordClick(event) {
        //    const wordIndex = event.target.dataset.wordIndex; // Get the word index from data attribute
        //    if (wordIndex) {
        //        const pageIndex = currentPageIndex; // Read from the current page
        //        window.speechSynthesis.cancel(); // Stop any ongoing speech
        //        readPage(pageIndex, parseInt(wordIndex, 10)); // Start reading from the clicked word
        //    }
        //}

        // Function to handle word click and read only the clicked word
        function handleWordClick(event) {
            const wordIndex = event.target.dataset.wordIndex; // Get the word index from data attribute
            if (wordIndex) {
                const wordToRead = event.target.textContent; // Get the clicked word's text
                window.speechSynthesis.cancel(); // Stop any ongoing speech

                // Prepare SpeechSynthesisUtterance for the specific word
                const utterance = new SpeechSynthesisUtterance(wordToRead);

                // Optional: Customize voice or other properties if needed
                utterance.rate = 1; // Set reading speed if desired
                utterance.pitch = 5; // Set pitch if desired

                // Speak the word
                window.speechSynthesis.speak(utterance);

                isReading = false; // Finished reading all pages
                document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-volume-up\"></i>"; // Reset button text
                $('#playPauseBtn').removeClass("btn-danger");
                $('#playPauseBtn').addClass("btn-success");
            }
        }

        // Function to make words clickable
        function makeWordsClickable(pageIndex) {
            const page = pages[pageIndex];
            const contentParagraphs = page.querySelectorAll('.fb-page-content');

            contentParagraphs.forEach(paragraph => {
                const paragraphText = paragraph.innerText.trim();

                // Only consider paragraphs with actual text content (non-empty, no HTML-only content)
                if (paragraphText.length > 0) {
                    const words = paragraphText.split(/\s+/); // Split paragraph into words

                    // Replace the paragraph content with clickable spans around each word
                    paragraph.innerHTML = words.map((word, index) => `<span class="clickable-word" data-word-index="${index}">${word}</span>`).join(' ');
                }
            });
        }

        // Flip page function
        function flipPage() {
            const current = pages[currentPageIndex];
            const previous = pages[currentPageIndex - 1];

            // Hide the cover if flipping the first page
            if (currentPageIndex == 0) {
                cover.classList.add('hidden'); // Hide the cover
            } else if (currentPageIndex > 0) {
                previous.classList.add('flipped'); // Flip previous page
            }

            // Hide all other pages except the current one
            pages.forEach((page, index) => {
                if (index !== currentPageIndex) {
                    page.style.display = 'none'; // Hide the other pages
                } else {
                    page.style.display = 'block'; // Show the current page
                    page.classList.remove('flipped'); // Ensure current page is not flipped
                    makeWordsClickable(index); // Make the words of the current page clickable
                }
            });
        }

        // Button to go to a specific page
        document.getElementById('goToPageBtn').addEventListener('click', function () {
            const pageInput = document.getElementById('pageInput').value;
            const pageNumber = parseInt(pageInput, 10);

            if (pageNumber >= 1 && pageNumber <= totalPages) {
                currentPageIndex = pageNumber - 1; // Adjust for 0-indexing

                if (currentPageIndex > 0) {
                    cover.classList.add('hidden'); // Hide the cover
                }

                flipPage(); // Flip to the selected page
                window.speechSynthesis.cancel(); // Stop current speech
                //readPage(currentPageIndex); // Read the current page

                //isReading = true;
                //document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-stop-fill\"></i>"; // Set play/pause button to pause
                //$('#playPauseBtn').removeClass("btn-success").addClass("btn-danger"); // Update button styling

                // Save progress after navigating to the selected page
                saveProgress(currentPageIndex);
            } else {
                alert('Please enter a valid page number between 1 and ' + totalPages);
            }
        });

        // Previous button functionality
        document.getElementById('prevBtn').addEventListener('click', function () {
            // If on the first page (page 1)
            if (currentPageIndex === 0) {
                document.getElementById("prevBtn").disabled = true;
                document.getElementById("nextBtn").disabled = false;
                if (document.getElementById('btnTakeQuiz')) {
                    document.getElementById("btnTakeQuiz").classList.remove("d-inline-flex");
                    document.getElementById("btnTakeQuiz").classList.add("d-none");
                }

                // Show the cover if we are on the first page
                cover.classList.remove('hidden'); // Show the cover
                currentPageIndex = -1; // Set to -1 so it is clear we are on the cover now
                window.speechSynthesis.cancel(); // Stop any ongoing speech
                isReading = false; // Stop reading
                document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-volume-up\"></i>"; // Reset play/pause button to play
                $('#playPauseBtn').removeClass("btn-danger").addClass("btn-success"); // Update button styling
                saveProgress(-1); // Save progress for cover page
                return; // Stop further execution
            }

            // If not on the first page, go to the previous page normally
            if (currentPageIndex > 0) {
                currentPageIndex--;
                flipPage(); // Flip to the previous page
                window.speechSynthesis.cancel(); // Stop current speech
                //readPage(currentPageIndex); // Read the previous page
                saveProgress(currentPageIndex); // Save the progress
            }

            //isReading = true;
            //document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-stop-fill\"></i>"; // Set play/pause button to pause
            //$('#playPauseBtn').removeClass("btn-success").addClass("btn-danger"); // Update button styling
            document.getElementById("nextBtn").disabled = false;

            if (document.getElementById('btnTakeQuiz')) {
                document.getElementById("btnTakeQuiz").classList.remove("d-inline-flex");
                document.getElementById("btnTakeQuiz").classList.add("d-none");
            }
        });

        // Next button functionality
        document.getElementById('nextBtn').addEventListener('click', function () {
            if (!cover.classList.contains('hidden')) {
                // If the cover is visible, hide the cover and go to page 1
                cover.classList.add('hidden'); // Hide the cover
                currentPageIndex = 0; // Move to the first page (index 0)
                flipPage(); // Flip to the first page
                window.speechSynthesis.cancel(); // Stop current speech
                //readPage(currentPageIndex); // Read the first page
            } else {
                const randomQuestion = questions[0];

                if (randomQuestion.question != "") {
                    // Check if it's the random question page and the question hasn't been shown yet
                    if (currentPageIndex === randomQuestionPage && !questionShown) {
                        showRandomQuestion(); // Show random question modal 
                        return; // Stop further navigation until the question is answered
                    }
                }

                // If already past the cover, move to the next page normally
                if (currentPageIndex < totalPages - 1) {
                    currentPageIndex++;
                    flipPage(); // Flip to the next page
                    window.speechSynthesis.cancel(); // Stop current speech
                    //readPage(currentPageIndex); // Read the next page
                }

            }

            document.getElementById("prevBtn").disabled = false;
            //isReading = true;
            //document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-stop-fill\"></i>"; // Reset button text
            //$('#playPauseBtn').removeClass("btn-success");
            //$('#playPauseBtn').addClass("btn-danger");

            if (document.getElementById('btnTakeQuiz')) {
                if (currentPageIndex == (totalPages - 1)) {
                    document.getElementById("btnTakeQuiz").classList.remove("d-none");
                    document.getElementById("btnTakeQuiz").classList.add("d-inline-flex");

                } else {
                    document.getElementById("btnTakeQuiz").classList.remove("d-inline-flex");
                    document.getElementById("btnTakeQuiz").classList.add("d-none");
                }
            }

            if (currentPageIndex == (totalPages - 1)) {
                document.getElementById("nextBtn").disabled = true;
            } else {
                document.getElementById("nextBtn").disabled = false;
            }

            // Save progress after flipping to the new page
            saveProgress(currentPageIndex);
        });

        // Global event listener for clickable words
        document.addEventListener('click', function(event) {
            if (event.target.classList.contains('clickable-word')) {
                handleWordClick(event); // Trigger reading from the clicked word
            }
        });

        // Play/Pause button functionality
        document.getElementById('playPauseBtn').addEventListener('click', togglePlayPause);


     // Function to save the reading progress
        function saveProgress(pageIndex) {
            var storyId = @ViewContext.RouteData.Values["id"];
            var studentId = @Session["UserID"];

            $.ajax({
                type: "POST",
                url: "@Url.Action("SaveProgress", "Story")",
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify({
                    StoryID: storyId,
                    StudentID: studentId,
                    LastPageRead: pageIndex + 1,
                    TotalPages: totalPages
                }),
                success: function (result) {
                    console.log("Progress saved successfully:", result);
                },
                error: function () {
                    console.error("Error saving progress.");
                }
            });
        }

        // Function to show a random question (only once)
        function showRandomQuestion() {
            const randomCorrectAnswer = "@Model.RandomCorrectAnswer";
            const randomQuestionHint = "@Model.RandomQuestionHint";
            const randomQuestion = questions[0];
            randomQuestionText.innerText = randomQuestion.question;

            // Show the Bootstrap modal
            $("#randomQuestionModal").modal("show");

            // Disable the Next button while the question is being answered
            nextBtn.disabled = true;

            // Event listener for when the modal is closed
            $('#randomQuestionModal').on('hidden.bs.modal', function () {
                if (!questionShown) {
                    // If the question was not answered, go back to the previous page
                    if (currentPageIndex > 0) {
                        currentPageIndex--;
                        flipPage(); // Flip to the previous page 
                    } 


                    // If on the first page (page 1)
                    if (currentPageIndex === 0) {
                        document.getElementById("prevBtn").disabled = true;
                        document.getElementById("nextBtn").disabled = false;
                        if (document.getElementById('btnTakeQuiz')) {
                            document.getElementById("btnTakeQuiz").classList.remove("d-inline-flex");
                            document.getElementById("btnTakeQuiz").classList.add("d-none");
                        }

                        // Show the cover if we are on the first page
                        cover.classList.remove('hidden'); // Show the cover
                        currentPageIndex = -1; // Set to -1 so it is clear we are on the cover now
                        window.speechSynthesis.cancel(); // Stop any ongoing speech
                        isReading = false; // Stop reading
                        document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-volume-up\"></i>"; // Reset play/pause button to play
                        $('#playPauseBtn').removeClass("btn-danger").addClass("btn-success"); // Update button styling
                        saveProgress(-1); // Save progress for cover page
                        return; // Stop further execution
                    }

                    saveProgress(currentPageIndex); // Save the progress
                    nextBtn.disabled = false;

                    if (document.getElementById('btnTakeQuiz')) {
                        document.getElementById("btnTakeQuiz").classList.remove("d-inline-flex");
                        document.getElementById("btnTakeQuiz").classList.add("d-none");
                    }

                    return;
                }
            });

            // Enable "Next" button to proceed to the next page after answering
            submitRandomQuestionModal.onclick = function () {

                var studentAnswer = "";
                $('[name="answers[]"]').each(function () {
                    if ($(this).prop('checked') == true) {
                        studentAnswer = $(this).val();
                    }
                });

                if (studentAnswer == "") {
                    Swal.fire({
                        icon: "error",
                        title: "Please answer the question before proceeding to the next page.",
                    });
                    return;
                } else {

                    if (studentAnswer == randomCorrectAnswer) {
                        Swal.fire({
                            icon: "success",
                            title: "You did it, good job!",
                        });
                        questionShown = true; // Mark question as shown
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Not quite, but you’ll get there.",
                        });
                        return;
                    }



                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("SaveStudentRandomAnswer", "Story")",
                        contentType: 'application/json; charset=utf-8',
                        data: JSON.stringify({
                            StoryID: @Model.ID,
                            StudentID: @Session["UserID"],
                            Answer: studentAnswer
                        }),
                        success: function (result) { 
                            console.log("Random answer saved successfully:", result);
                        },
                        error: function () {
                            console.error("Error saving random answer.");
                        }
                    });
                }


                // Close the modal
                $("#randomQuestionModal").modal("hide");

                // Enable the Next button
                nextBtn.disabled = false;

                // Now, proceed to the next page
                if (currentPageIndex < totalPages - 1) {
                    currentPageIndex++;
                    flipPage(); // Flip to the next page
                    saveProgress(currentPageIndex); // Save progress
                }

                document.getElementById("prevBtn").disabled = false;

                if (document.getElementById('btnTakeQuiz')) {
                    if (currentPageIndex == (totalPages - 1)) {
                        document.getElementById("btnTakeQuiz").classList.remove("d-none");
                        document.getElementById("btnTakeQuiz").classList.add("d-inline-flex");

                    } else {
                        document.getElementById("btnTakeQuiz").classList.remove("d-inline-flex");
                        document.getElementById("btnTakeQuiz").classList.add("d-none");
                    }
                }

                if (currentPageIndex == (totalPages - 1)) {
                    document.getElementById("nextBtn").disabled = true;
                } else {
                    document.getElementById("nextBtn").disabled = false;
                }

                // Save progress after flipping to the new page
                saveProgress(currentPageIndex);
            };
        }




        $(document).ready(function () {
            window.speechSynthesis.cancel();
            if (currentPageIndex > 0) {
                cover.classList.add('hidden'); // Hide the cover

                currentPageIndex = currentPageIndex - 1;
                flipPage(); // Flip to the selected page
                window.speechSynthesis.cancel(); // Stop current speech
                //readPage(currentPageIndex); // Read the current page

                //isReading = true;
                //document.getElementById('playPauseBtn').innerHTML = "<i class=\"bi-stop-fill\"></i>"; // Set play/pause button to pause
                //$('#playPauseBtn').removeClass("btn-success").addClass("btn-danger"); // Update button styling
            } else {
                document.getElementById("prevBtn").disabled = true;
            }

            //Handle selecting one correcting answer
            let answers = document.querySelectorAll("input[name='answers[]']");
            answers.forEach(b => b.addEventListener("change", tick));
            function tick(e) {
                let state = e.target.checked; // save state of changed checkbox
                answers.forEach(b => b.checked = false); // clear all checkboxes
                e.target.checked = state; // restore state of changed checkbox
            }
        });

        // Event listener for navigation
        window.addEventListener("beforeunload", function () {
            window.speechSynthesis.cancel(); // Stop current speech
        });

    </script>





}