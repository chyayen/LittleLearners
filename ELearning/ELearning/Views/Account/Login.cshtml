@model ELearning.Models.LoginViewModel
@{
    Layout = "~/Views/Shared/_LayoutMain.cshtml";
    ViewBag.Title = "Student Login";
}

<!-- Page Title -->
<div class="page-title" data-aos="fade">
    <div class="heading">
        <div class="container">
            <div class="row d-flex justify-content-center text-center">
                <div class="col-lg-8">
                    <h1>@ViewBag.Title</h1>
                    <p class="mb-0">Enter your username & password to login</p>
                </div>
            </div>
        </div>
    </div>
</div><!-- End Page Title -->
<!-- Student Login Section -->
<section id="contact" class="contact section">

    <div class="container" data-aos="fade-up" data-aos-delay="100">

        <div class="row justify-content-md-center">

            <div class="col col-sm-4">&nbsp;</div>
            <div class="col col-sm-4 ">
                @Html.Raw(TempData["AlertMessage"])

                @using (Html.BeginForm("Login", "Account", FormMethod.Post, new { @class = "row g-3 needs-validation mt-2", novalidate = "" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.ReturnURL)
                    <div class="col-12">
                        <label for="yourUsername" class="form-label">Username</label>
                        <div class="input-group has-validation">
                            <span class="input-group-text" id="inputGroupPrepend"><i class="bi bi-person"></i></span>
                            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", required = "" })
                            @Html.ValidationMessageFor(m => m.UserName, "Please enter your username!", new { @class = "invalid-feedback" })
                        </div>
                    </div>

                    @*<div class="col-12">
                        <label for="yourPassword" class="form-label">Password</label>
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "" })
                        @Html.ValidationMessageFor(m => m.UserName, "Please enter your password!", new { @class = "invalid-feedback" })
                    </div>*@

                    <div class="col-12">
                        <label for="Password" class="form-label">Password</label>
                        <div class="input-group">
                            <span class="input-group-text" id="inputGroupPrepend"><i class="bi bi-lock"></i></span>
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "" })
                            <button type="button" class="btn btn-outline-secondary" id="togglePassword">
                                <i class="bi bi-eye" id="passwordIcon"></i>
                            </button>
                        </div>
                        @Html.ValidationMessageFor(m => m.Password, "Please enter your password!", new { @class = "invalid-feedback" })
                    </div>

                    <div class="col-12">
                        <button class="btn btn-success w-100" type="submit">Login</button>
                    </div>
                    <div class="col-12">
                        <p class="small mb-0">Don't have account? <a href="@Url.Action("Register", "Account")">Create an account</a></p>
                    </div>
                }
            </div><!-- End Student Login Form -->
            <div class="col col-sm-4">&nbsp;</div>

        </div>

    </div>

</section><!-- /Student Login Section -->


@section Scripts {
    <script>
        document.getElementById("togglePassword").addEventListener("click", function () {
            const passwordField = document.getElementById("Password");
            const passwordIcon = document.getElementById("passwordIcon");
            const isPasswordVisible = passwordField.type === "password";

            passwordField.type = isPasswordVisible ? "text" : "password";
            passwordIcon.classList.toggle("bi-eye", !isPasswordVisible);
            passwordIcon.classList.toggle("bi-eye-slash", isPasswordVisible);
        });
    </script>
    
    
    }
